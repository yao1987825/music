name: Build and Publish ImmortalWrt Docker Image

#on:
  workflow_dispatch:
 # push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86, armv8]
    
    env:
      IMMORTALWRT_VERSION: 24.10.0-rc3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download rootfs
        run: |
          if [[ "${{ matrix.arch }}" == "x86" ]]; then
            wget https://downloads.immortalwrt.org/releases/${{ env.IMMORTALWRT_VERSION }}/targets/x86/64/immortalwrt-${{ env.IMMORTALWRT_VERSION }}-x86-64-rootfs.tar.gz
            mv immortalwrt-${{ env.IMMORTALWRT_VERSION }}-x86-64-rootfs.tar.gz rootfs.tar.gz
          else
            wget https://downloads.immortalwrt.org/releases/${{ env.IMMORTALWRT_VERSION }}/targets/armsr/armv8/immortalwrt-${{ env.IMMORTALWRT_VERSION }}-armsr-armv8-rootfs.tar.gz
            mv immortalwrt-${{ env.IMMORTALWRT_VERSION }}-armsr-armv8-rootfs.tar.gz rootfs.tar.gz
          fi
    
      - name: Extract rootfs
        run: tar xzf rootfs.tar.gz

      - name: Remove original tar.gz
        run: rm rootfs.tar.gz

      - name: Create rootfs.tar
        run: tar -cf rootfs.tar *

      - name: Create Dockerfile
        run: |
          echo "FROM scratch" > Dockerfile
          echo "ADD rootfs.tar /" >> Dockerfile

      - name: Build Docker Image
        run: docker build -t immortalwrt-image .
      
      - name: Tag Docker Image
        run: |
          if [[ "${{ matrix.arch }}" == "x86" ]]; then
              docker tag immortalwrt-image ghcr.io/${{ github.repository_owner }}/immortalwrt-image:x86-${{ github.run_id }}
            else
              docker tag immortalwrt-image ghcr.io/${{ github.repository_owner }}/immortalwrt-image:armv8-${{ github.run_id }}
          fi

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.PERSONAL_ACCESS_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Push Docker Image
        run: |
          if [[ "${{ matrix.arch }}" == "x86" ]]; then
             docker push ghcr.io/${{ github.repository_owner }}/immortalwrt-image:x86-${{ github.run_id }}
          else
             docker push ghcr.io/${{ github.repository_owner }}/immortalwrt-image:armv8-${{ github.run_id }}
          fi

      - name: Set Release Name and Tag
        id: set_release_name
        run: |
          if [[ "${{ matrix.arch }}" == "x86" ]]; then
             echo "release_name=immortalwrt-v${{ env.IMMORTALWRT_VERSION }}-x86-${{ github.run_id }}" >> $GITHUB_OUTPUT
             echo "tag_name=immortalwrt-v${{ env.IMMORTALWRT_VERSION }}-x86-${{ github.run_id }}" >> $GITHUB_OUTPUT
          else
              echo "release_name=immortalwrt-v${{ env.IMMORTALWRT_VERSION }}-armv8-${{ github.run_id }}" >> $GITHUB_OUTPUT
              echo "tag_name=immortalwrt-v${{ env.IMMORTALWRT_VERSION }}-armv8-${{ github.run_id }}" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          tag_name: ${{ steps.set_release_name.outputs.tag_name }}
          release_name: ${{ steps.set_release_name.outputs.release_name }}
          body: |
            Docker image for ImmortalWrt based on build ${{ github.run_id }}.
            Image is available at ghcr.io/${{ github.repository_owner }}/immortalwrt-image:${{ github.run_id }}
          draft: false
          prerelease: false

      - name: Write information to docker-image.txt
        run: |
          if [[ "${{ matrix.arch }}" == "x86" ]]; then
             echo "ghcr.io/${{ github.repository_owner }}/immortalwrt-image:x86-${{ github.run_id }}" > docker-image.txt
          else
             echo "ghcr.io/${{ github.repository_owner }}/immortalwrt-image:armv8-${{ github.run_id }}" > docker-image.txt
          fi
          
      - name: Upload Docker Image to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: docker-image.txt
          asset_name: docker-image.txt
          asset_content_type: text/plain
